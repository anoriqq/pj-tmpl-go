// Code generated by "enumer -type=Env -transform=lower"; DO NOT EDIT.

package env

import (
	"fmt"
	"strings"

	"github.com/go-errors/errors"
)

const _EnvName = "prdstgdevlcl"

var _EnvIndex = [...]uint8{0, 3, 6, 9, 12}

const _EnvLowerName = "prdstgdevlcl"

func (i Env) String() string {
	if i < 0 || i >= Env(len(_EnvIndex)-1) {
		return fmt.Sprintf("Env(%d)", i)
	}
	return _EnvName[_EnvIndex[i]:_EnvIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EnvNoOp() {
	var x [1]struct{}
	_ = x[PRD-(0)]
	_ = x[STG-(1)]
	_ = x[DEV-(2)]
	_ = x[LCL-(3)]
}

var _EnvValues = []Env{PRD, STG, DEV, LCL}

var _EnvNameToValueMap = map[string]Env{
	_EnvName[0:3]:       PRD,
	_EnvLowerName[0:3]:  PRD,
	_EnvName[3:6]:       STG,
	_EnvLowerName[3:6]:  STG,
	_EnvName[6:9]:       DEV,
	_EnvLowerName[6:9]:  DEV,
	_EnvName[9:12]:      LCL,
	_EnvLowerName[9:12]: LCL,
}

var _EnvNames = []string{
	_EnvName[0:3],
	_EnvName[3:6],
	_EnvName[6:9],
	_EnvName[9:12],
}

// EnvString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EnvString(s string) (Env, error) {
	if val, ok := _EnvNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EnvNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, errors.Errorf("%s does not belong to Env values", s)
}

// EnvValues returns all values of the enum
func EnvValues() []Env {
	return _EnvValues
}

// EnvStrings returns a slice of all String values of the enum
func EnvStrings() []string {
	strs := make([]string, len(_EnvNames))
	copy(strs, _EnvNames)
	return strs
}

// IsAEnv returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Env) IsAEnv() bool {
	for _, v := range _EnvValues {
		if i == v {
			return true
		}
	}
	return false
}
