[alias]
actionlint = "go:github.com/rhysd/actionlint/cmd/actionlint"
disable-checkout-persist-credentials = "go:github.com/suzuki-shunsuke/disable-checkout-persist-credentials/cmd/disable-checkout-persist-credentials"
ghalint = "go:github.com/suzuki-shunsuke/ghalint/cmd/ghalint"
gotest = "go:github.com/rakyll/gotest"
reviewdog = "go:github.com/reviewdog/reviewdog/cmd/reviewdog"

[tools]
actionlint = "latest"
air = "latest"
cosign = "2.5.3"
disable-checkout-persist-credentials = "latest"
ghalint = "latest"
gitleaks = "latest"
go = "1.25.1"
golangci-lint = "2.5.0"
gotest = "latest"
lefthook = "latest"
pinact = "latest"
pulumi = "latest"
reviewdog = "0.21.0"
slsa-verifier = "2.7.1"
yq = "latest"
zizmor = "latest"

[env]
ENV = "lcl"
_.file = ".env"

[tasks.help]
description = "Display available tasks"
run = "mise tasks ls -l"

[tasks.lint]
description = "Run linters"
depends = ["lint:*"]
dir = "{{cwd}}"

[tasks."lint:go"]
description = "Run linters"
depends = ["lint:go:*"]
dir = "{{cwd}}"

[tasks."lint:gha"]
description = "Run linters"
depends = ["lint:gha:*"]
dir = "{{cwd}}"

[tasks."lint:gha:pinact"]
run = "pinact run --check"
dir = "{{cwd}}"

[tasks."lint:gha:actionlint"]
run = "actionlint"
dir = "{{cwd}}"

[tasks."lint:gha:ghalint-run"]
run = "ghalint run"
dir = "{{cwd}}"

[tasks."lint:gha:ghalint-act"]
run = "ghalint act"
dir = "{{cwd}}"

[tasks."lint:gha:zizmor"]
run = "zizmor -q ."

[tasks."lint:go:golangci-lint:setup"]
description = "Generate merged golangci config for LSP"
dir = "{{cwd}}"
sources = ["{{config_root}}/.golangci.yml", "{{cwd}}/.golangci.custom.yml"]
outputs = "./.golangci.yml"
run = """
#!/bin/bash
set -e

PROJECT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || echo ".")
BASE_CONFIG="$PROJECT_ROOT/.golangci.yml"
CUSTOM_CONFIG="./.golangci.custom.yml"
MERGED_CONFIG="./.golangci.yml"

if [ -f "$CUSTOM_CONFIG" ]; then
  echo "üìù Generating merged config for LSP..."
  yq eval-all 'select(fileIndex == 0) * select(fileIndex == 1)' \
    "$BASE_CONFIG" "$CUSTOM_CONFIG" > "$MERGED_CONFIG"
  echo "‚úÖ Created $MERGED_CONFIG"
else
  # „Ç´„Çπ„Çø„É†Ë®≠ÂÆö„Åå„Å™„ÅÑÂ†¥Âêà„ÅØ„Éô„Éº„ÇπË®≠ÂÆö„Å∏„ÅÆ„Ç∑„É≥„Éú„É™„ÉÉ„ÇØ„É™„É≥„ÇØ
  if [ -L "$MERGED_CONFIG" ] || [ ! -f "$MERGED_CONFIG" ]; then
    ln -sf "$BASE_CONFIG" "$MERGED_CONFIG"
    echo "üîó Linked to base config"
  fi
fi
"""

[tasks."lint:go:golangci-lint"]
description = "Run golangci-lint"
depends = ["lint:go:golangci-lint:setup"]
dir = "{{cwd}}"
run = "golangci-lint run --config ./.golangci.yml"

[tasks.fmt]
run = "golangci-lint run --config ./.golangci.yml --fix"
dir = "{{cwd}}"

[tasks.gen]
description = "Generate code"
run = "go generate ./..."

[tasks.test]
description = "Run tests"
run = "gotest -race -shuffle on -timeout 3s -count 2 -vet off ./..."

[tasks."test:pulumi"]
description = "Run pulumi tests"
dir = "./.pulumi/"
run = "gotest -race -shuffle on -timeout 3s -count 2 -vet off ./..."

[tasks.clean]
description = "Clean up build artifacts"
run = '''
ROOT_PACKAGE=$(go list .)
COMMAND_PACKAGES=$(go list ./cmd | grep -v '^\([^/]*/\)\{4\}')
BINARIES=$(echo "$COMMAND_PACKAGES" | sed "s|$ROOT_PACKAGE/|bin/|g")
rm -f $BINARIES
'''

[tasks.build]
description = "Build all binaries. If RELEASE is set, it will build release binaries."
run = '''
#!/bin/bash
set -e

# Create bin directory if it doesn't exist
mkdir -p bin

# Get package information
ROOT_PACKAGE=$(go list .)
COMMAND_PACKAGES=$(go list ./cmd | grep -v '^\([^/]*/\)\{4\}')

# Build flags configuration
GO_LDFLAGS=""
GO_BUILD_TAGS="debug"
GO_BUILD_RACE="-race"
GO_BUILD_STATIC=""
CGO_ENABLED=1

# Configure for release build
if [ -n "$RELEASE" ]; then
    GO_LDFLAGS="-w -s -extldflags '-static'"
    GO_BUILD_TAGS="release,netgo"
    GO_BUILD_RACE=""
    GO_BUILD_STATIC="-a -installsuffix netgo"
    CGO_ENABLED=0
fi

# Build each binary
for pkg in $COMMAND_PACKAGES; do
    binary_name=$(echo "$pkg" | sed "s|$ROOT_PACKAGE/||g")
    binary_path="bin/$binary_name"

    echo "Building $binary_path..."
    CGO_ENABLED=$CGO_ENABLED go build \
        -tags="$GO_BUILD_TAGS" \
        $GO_BUILD_RACE \
        $GO_BUILD_STATIC \
        -ldflags "$GO_LDFLAGS" \
        -o "$binary_path" \
        "$pkg"
done

echo "Binaries built in bin/"
'''

[tasks.run]
description = "Run the main application"
run = '''
ROOT_PACKAGE=$(go list .)
COMMAND_PACKAGES=$(go list ./cmd | grep -v '^\([^/]*/\)\{4\}')
BINARIES=$(echo "$COMMAND_PACKAGES" | sed "s|$ROOT_PACKAGE/|bin/|g")
air -c .air.toml -build.bin $BINARIES
'''
